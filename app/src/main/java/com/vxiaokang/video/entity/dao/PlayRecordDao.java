package com.vxiaokang.video.entity.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.vxiaokang.video.entity.PlayRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAY_RECORD".
*/
public class PlayRecordDao extends AbstractDao<PlayRecord, Long> {

    public static final String TABLENAME = "PLAY_RECORD";

    /**
     * Properties of entity PlayRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, Long.class, "type", false, "TYPE");
        public final static Property VideoKey = new Property(2, String.class, "videoKey", false, "VIDEO_KEY");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Keywords = new Property(5, String.class, "keywords", false, "KEYWORDS");
        public final static Property Description = new Property(6, String.class, "description", false, "DESCRIPTION");
        public final static Property CoverImage = new Property(7, String.class, "coverImage", false, "COVER_IMAGE");
        public final static Property Position = new Property(8, int.class, "position", false, "POSITION");
        public final static Property Link = new Property(9, String.class, "link", false, "LINK");
        public final static Property SourceLink = new Property(10, String.class, "sourceLink", false, "SOURCE_LINK");
        public final static Property CreateDate = new Property(11, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property Update = new Property(12, java.util.Date.class, "update", false, "UPDATE");
        public final static Property Remark = new Property(13, String.class, "remark", false, "REMARK");
        public final static Property Param1 = new Property(14, String.class, "param1", false, "PARAM1");
        public final static Property Param2 = new Property(15, String.class, "param2", false, "PARAM2");
        public final static Property Param3 = new Property(16, String.class, "param3", false, "PARAM3");
    }


    public PlayRecordDao(DaoConfig config) {
        super(config);
    }
    
    public PlayRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAY_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" INTEGER," + // 1: type
                "\"VIDEO_KEY\" TEXT," + // 2: videoKey
                "\"CONTENT\" TEXT," + // 3: content
                "\"TITLE\" TEXT," + // 4: title
                "\"KEYWORDS\" TEXT," + // 5: keywords
                "\"DESCRIPTION\" TEXT," + // 6: description
                "\"COVER_IMAGE\" TEXT," + // 7: coverImage
                "\"POSITION\" INTEGER NOT NULL ," + // 8: position
                "\"LINK\" TEXT," + // 9: link
                "\"SOURCE_LINK\" TEXT," + // 10: sourceLink
                "\"CREATE_DATE\" INTEGER," + // 11: createDate
                "\"UPDATE\" INTEGER," + // 12: update
                "\"REMARK\" TEXT," + // 13: remark
                "\"PARAM1\" TEXT," + // 14: param1
                "\"PARAM2\" TEXT," + // 15: param2
                "\"PARAM3\" TEXT);"); // 16: param3
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAY_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PlayRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type);
        }
 
        String videoKey = entity.getVideoKey();
        if (videoKey != null) {
            stmt.bindString(3, videoKey);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String keywords = entity.getKeywords();
        if (keywords != null) {
            stmt.bindString(6, keywords);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        String coverImage = entity.getCoverImage();
        if (coverImage != null) {
            stmt.bindString(8, coverImage);
        }
        stmt.bindLong(9, entity.getPosition());
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(10, link);
        }
 
        String sourceLink = entity.getSourceLink();
        if (sourceLink != null) {
            stmt.bindString(11, sourceLink);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(12, createDate.getTime());
        }
 
        java.util.Date update = entity.getUpdate();
        if (update != null) {
            stmt.bindLong(13, update.getTime());
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
 
        String param1 = entity.getParam1();
        if (param1 != null) {
            stmt.bindString(15, param1);
        }
 
        String param2 = entity.getParam2();
        if (param2 != null) {
            stmt.bindString(16, param2);
        }
 
        String param3 = entity.getParam3();
        if (param3 != null) {
            stmt.bindString(17, param3);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PlayRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type);
        }
 
        String videoKey = entity.getVideoKey();
        if (videoKey != null) {
            stmt.bindString(3, videoKey);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String keywords = entity.getKeywords();
        if (keywords != null) {
            stmt.bindString(6, keywords);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        String coverImage = entity.getCoverImage();
        if (coverImage != null) {
            stmt.bindString(8, coverImage);
        }
        stmt.bindLong(9, entity.getPosition());
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(10, link);
        }
 
        String sourceLink = entity.getSourceLink();
        if (sourceLink != null) {
            stmt.bindString(11, sourceLink);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(12, createDate.getTime());
        }
 
        java.util.Date update = entity.getUpdate();
        if (update != null) {
            stmt.bindLong(13, update.getTime());
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
 
        String param1 = entity.getParam1();
        if (param1 != null) {
            stmt.bindString(15, param1);
        }
 
        String param2 = entity.getParam2();
        if (param2 != null) {
            stmt.bindString(16, param2);
        }
 
        String param3 = entity.getParam3();
        if (param3 != null) {
            stmt.bindString(17, param3);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PlayRecord readEntity(Cursor cursor, int offset) {
        PlayRecord entity = new PlayRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // videoKey
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // keywords
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // description
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // coverImage
            cursor.getInt(offset + 8), // position
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // link
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // sourceLink
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // createDate
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // update
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // remark
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // param1
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // param2
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // param3
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PlayRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setVideoKey(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setKeywords(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCoverImage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPosition(cursor.getInt(offset + 8));
        entity.setLink(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSourceLink(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreateDate(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setUpdate(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setRemark(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setParam1(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setParam2(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setParam3(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PlayRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PlayRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PlayRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
